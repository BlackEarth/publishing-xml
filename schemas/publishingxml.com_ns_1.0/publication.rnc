# publication -- a publication control file

namespace pub = "http://publishingxml.com/ns/1.0"
namespace epub = "http://www.idpf.org/2007/ops"

grammar {
	include "../www.idpf.org_2007_opf/package.rnc"

	start |= pub.publication

	pub.publication = element pub:publication {
		attribute name { xsd:NCName },
		( opf.metadata-element+
		& pub.sources
		& pub.documents
		& pub.resources
		& pub.spine 
		& pub.exports )
	}

	pub.sources = element pub:sources {
		element pub:source {
			attribute href { xsd:anyURI },
			attribute imported { xsd:dateTime }?
		}*
	}

	pub.documents = element pub:documents {
		element pub:document {
			attribute href { xsd:anyURI },
			attribute source { xsd:anyURI }?				# the pub:source from which the document comes
		}*
	}

	pub.resources = element pub:resources {
		element pub:resource {
			attribute class { xsd:NMTOKENS },
			attribute href { xsd:anyURI }
		}*
	}

	pub.spine = element pub:spine {
		element pub:spineitem {
			attribute href { xsd:anyURI },					# *required* URI to the pub:document.
			attribute idref { xsd:NCName }?,				# if given, the section id of the pub:document
			attribute linear { "yes"|"no" }?,				# opf:itemref linear
			attribute properties { xsd:string }?,			# opf:itemref properties
			attribute title { xsd:normalizedString }?,		# the title of the section (for the toc)
			attribute epub:type { xsd:normalizedString }?	# if given, the epub:type of this item, for nav
		}*
	}

	pub.exports = element pub:exports {
		attribute pending { "True"|"False" }?,				# whether the export process is currently pending
		attribute started { xsd:dateTime }?,				# when the export process was last started
		attribute completed { xsd:dateTime }?,				# when the export process was last completed

		attribute queue_fn { xsd:anyURI }?,					# transient: queue filename
		attribute queue_position { xsd:integer }?,			# transient: queue position (not usually saved)
		
		element pub:export {
			attribute kind { xsd:NCName },					# *required* e.g. "EPUB", "Kindle", "PDF", "print"
			attribute modified { xsd:dateTime }?,			# when the export was completed
			attribute success { "True"|"False" }?,			# whether it succeeded
			attribute href { xsd:anyURI }?, 				# (local) URI to the export file
			attribute message { xsd:string }?				# any message returned from an unsuccessful export
															# report file at same href with ".txt" extension
		}*
	}

}